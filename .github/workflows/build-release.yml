name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
        default: '0.1.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-macos:
    name: Build macOS (ARM64 & x86_64)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install protobuf
        run: brew install protobuf

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add Rust targets
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build scheduler (ARM64)
        run: |
          cargo build --release --bin corpgrid-scheduler --target aarch64-apple-darwin
          mkdir -p target/release
          cp target/aarch64-apple-darwin/release/corpgrid-scheduler target/release/corpgrid-scheduler-aarch64-apple-darwin

      - name: Build scheduler (x86_64)
        run: |
          cargo build --release --bin corpgrid-scheduler --target x86_64-apple-darwin
          mkdir -p target/release
          cp target/x86_64-apple-darwin/release/corpgrid-scheduler target/release/corpgrid-scheduler-x86_64-apple-darwin

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version '=2.8.0' --locked

      - name: Build Tauri app (ARM64)
        run: |
          cd crates/tray-app/src-tauri
          cargo tauri build --target aarch64-apple-darwin

      - name: Build Tauri app (x86_64)
        run: |
          cd crates/tray-app/src-tauri
          cargo tauri build --target x86_64-apple-darwin

      - name: Upload macOS ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-aarch64
          path: |
            target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            target/aarch64-apple-darwin/release/bundle/macos/*.app

      - name: Upload macOS x86_64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-x86_64
          path: |
            target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
            target/x86_64-apple-darwin/release/bundle/macos/*.app

  build-linux:
    name: Build Linux (x86_64)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            protobuf-compiler

      - name: Install CUDA
        run: |
          # Install CUDA compiler and required libraries for linking
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get install -y cuda-nvcc-12-4 cuda-cudart-dev-12-4 libcublas-dev-12-4 cuda-nvrtc-dev-12-4 libcurand-dev-12-4

      - name: Install Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build scheduler with CUDA
        run: |
          export PATH="/usr/local/cuda-12.4/bin:$PATH"
          export LD_LIBRARY_PATH="/usr/local/cuda-12.4/lib64:$LD_LIBRARY_PATH"
          export LIBRARY_PATH="/usr/local/cuda-12.4/lib64:$LIBRARY_PATH"
          export CUDA_COMPUTE_CAP=86
          cargo build --release --bin corpgrid-scheduler --features cuda
          cp target/release/corpgrid-scheduler target/release/corpgrid-scheduler-x86_64-unknown-linux-gnu

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version '=2.8.0' --locked

      - name: Build Tauri app
        run: |
          cd crates/tray-app/src-tauri
          cargo tauri build --bundles deb,rpm

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: |
            target/release/bundle/deb/*.deb
            target/release/bundle/rpm/*.rpm

  build-windows:
    name: Build Windows (x86_64)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install protobuf
        run: choco install protoc -y

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build scheduler
        run: |
          cargo build --release --bin corpgrid-scheduler
          copy target\release\corpgrid-scheduler.exe target\release\corpgrid-scheduler-x86_64-pc-windows-msvc.exe

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version '=2.8.0' --locked

      - name: Build Tauri app
        run: |
          cd crates/tray-app/src-tauri
          cargo tauri build

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-x86_64
          path: |
            target/release/bundle/nsis/*.exe
            target/release/bundle/msi/*.msi

  create-release:
    name: Create GitHub Release
    needs: [build-macos, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-to-server:
    name: Deploy to Update Server
    needs: [build-macos, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Configure SSH for bx.ee
          cat >> ~/.ssh/config << 'EOF'
          Host bx.ee
            HostName ${{ secrets.COORDINATOR_HOST }}
            User ${{ secrets.SSH_USER }}
            Port 220
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            IdentityFile ~/.ssh/id_rsa
          EOF
          chmod 600 ~/.ssh/config

      - name: Generate update manifest
        run: |
          # Get version from tauri.conf.json
          VERSION=$(jq -r .version crates/tray-app/src-tauri/tauri.conf.json)
          DATE=$(date -u +"%Y-%m-%d")

          echo "Generating update manifest for version $VERSION"

          # Create manifest JSON
          cat > artifacts/latest.json << EOF
          {
            "version": "$VERSION",
            "date": "$DATE",
            "platforms": {
              "darwin-aarch64": {
                "url": "https://bx.ee/updates/gogrid-worker_${VERSION}_aarch64.dmg"
              },
              "darwin-x86_64": {
                "url": "https://bx.ee/updates/gogrid-worker_${VERSION}_x64.dmg"
              },
              "linux-x86_64": {
                "url": "https://bx.ee/updates/gogrid-worker_${VERSION}_amd64.deb"
              },
              "windows-x86_64": {
                "url": "https://bx.ee/updates/gogrid-worker_${VERSION}_x64-setup.exe"
              }
            }
          }
          EOF

          echo "Generated manifest:"
          cat artifacts/latest.json

      - name: Deploy to bx.ee
        run: |
          echo "Deploying to bx.ee update server..."

          # Create remote updates directory with sudo
          ssh bx.ee "doas mkdir -p /var/www/updates && doas chown jgowdy:jgowdy /var/www/updates"

          # Upload all artifacts
          echo "Uploading artifacts..."
          find artifacts -type f \( -name "*.dmg" -o -name "*.deb" -o -name "*.rpm" -o -name "*.exe" -o -name "*.msi" \) -exec scp {} bx.ee:/var/www/updates/ \;

          # Upload manifest
          echo "Uploading update manifest..."
          scp artifacts/latest.json bx.ee:/var/www/updates/latest.json

          # Set permissions
          ssh bx.ee "chmod 644 /var/www/updates/*"

          echo "Deployment complete!"
          echo "Updates available at https://bx.ee/updates/"
